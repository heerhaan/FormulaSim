<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TooltipDropDriverButton" xml:space="preserve">
    <value>To add driver back to the season, just make any modification to them</value>
  </data>
  <data name="TooltipImageButton" xml:space="preserve">
    <value>By clicking this button the table above gets copied and posted underneath as an image</value>
  </data>
  <data name="TooltipModifyRaceButton" xml:space="preserve">
    <value>Press the cog wheel to modify the stints and what happens each stint</value>
  </data>
  <data name="TooltipSeasonDefaultButton" xml:space="preserve">
    <value>Default returns the same season setup and races as the previous season</value>
  </data>
  <data name="TooltipSeasonDriverRandomReliabilityRoll" xml:space="preserve">
    <value>RNG for this roll is between 90 and 98</value>
  </data>
  <data name="TooltipSeasonDriverTeamStatus" xml:space="preserve">
    <value>First drivers swaps positions with their second driver if one position behind. Also gives +2/-2 to chassis</value>
  </data>
  <data name="ToolTipSeasonSettingsPitMax" xml:space="preserve">
    <value>The highest possible value for a pitstop, has to be more than the minimum pitstop value and should also be a negative value</value>
  </data>
  <data name="ToolTipSeasonSettingsPitMin" xml:space="preserve">
    <value>The lowest possible value for a pitstop, has to be less than the maximum pitstop value and should also be a negative value</value>
  </data>
  <data name="ToolTipSeasonSettingsPolePoints" xml:space="preserve">
    <value>How many points are given for qualifying in 1st position</value>
  </data>
  <data name="ToolTipSeasonSettingsQualyBonus" xml:space="preserve">
    <value>How many bonus points each position on the starting grid gets over the last qualified driver</value>
  </data>
  <data name="ToolTipSeasonSettingsQualyQ2" xml:space="preserve">
    <value>The amount of drivers that get to participate in the 2nd qualifying session</value>
  </data>
  <data name="ToolTipSeasonSettingsQualyQ3" xml:space="preserve">
    <value>The amount of drivers that get to participate in the 3rd qualifying session</value>
  </data>
  <data name="ToolTipSeasonSettingsQualyRng" xml:space="preserve">
    <value>Maximum RNG value that can be achieved during the qualifications with the lower value being 0</value>
  </data>
  <data name="ToolTipSeasonSettingsYear" xml:space="preserve">
    <value>Represents the year this season takes place in</value>
  </data>
  <data name="TooltipStintEventDriverSkill" xml:space="preserve">
    <value>Applies the skill of the driver plus the style bonus</value>
  </data>
  <data name="TooltipStintEventEnginePower" xml:space="preserve">
    <value>Applies the power of the engine</value>
  </data>
  <data name="TooltipStintEventLowerRng" xml:space="preserve">
    <value>Lowest possible RNG for a stint</value>
  </data>
  <data name="TooltipStintEventQualyBonus" xml:space="preserve">
    <value>Applies the bonus the qualifying position gives</value>
  </data>
  <data name="TooltipStintEventReliability" xml:space="preserve">
    <value>Two rolls between [0 to 100] for the driver and chassis reliability, if any roll is higher than the reliability value then the driver DNFs</value>
  </data>
  <data name="TooltipStintEventTeamChassis" xml:space="preserve">
    <value>Applies the chassis of the team plus various bonusses, like specification</value>
  </data>
  <data name="TooltipStintEventTyreBonus" xml:space="preserve">
    <value>Gives solid +10 to drivers with soft tires</value>
  </data>
  <data name="TooltipStintEventTyreWear" xml:space="preserve">
    <value>RNG of [-20 to 0] for drivers with soft tires</value>
  </data>
  <data name="TooltipStintEventUpperRng" xml:space="preserve">
    <value>Highest possible RNG for a stint</value>
  </data>
  <data name="ToolTipTeamReliability" xml:space="preserve">
    <value>Every reliability roll will be between 0 and 100. If the roll is higher than the drivers reliablity value then it causes a DNF</value>
  </data>
  <data name="ToolTipTeamSpecification" xml:space="preserve">
    <value>Specific values that get added to the chassis when the track matches the specification</value>
  </data>
</root>