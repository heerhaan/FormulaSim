@model FormuleCirkelEntity.ViewModels.TeamStatsModel

@{
    ViewData["Title"] = "Biography team";
}

<div class="d-inline-block">
    <div id="graphic">
        <h1>Biography</h1>
        @if (Model.TeamLong.Any())
        {
            <h3 class="badge" style="background-color:@(Model.TeamColour);color:@(Model.TeamAccent);font-size:2rem;">
                @Model.TeamLong - @Model.TeamShort
            </h3>
        }
        else
        {
            <h3 class="badge" style="background-color:white;color:black;font-size:2rem;">
                @Model.TeamShort
            </h3>
        }

        <div class="col mb-2 ml-auto mr-auto" style="max-width: 800px;">
            <h5 class="mb-1"><b>Drivers: </b></h5>
            <div>
                @foreach (var driver in Model.Drivers)
                {
                    <span class="badge mb-1" style="background-color: white; color: black; font-size: 0.9rem;">@(driver)</span>
                }
            </div>
        </div>

        <div class="flex-row">
            <dl class="flex-row text-left w-50">
                <dt class="col-6">
                    Races entries:
                </dt>
                <dd class="col-6">
                    @(Model.RaceEntries)
                </dd>
                <dt class="col-6">
                    Total car entries:
                </dt>
                <dd class="col-6">
                    @(Model.TotalCarEntries)
                </dd>
                <dt class="col-md-6">
                    Constructor titles:
                </dt>
                <dd class="col-md-6">
                    @Model.ConstructorTitles
                </dd>
                <dt class="col-md-6">
                    Wins:
                </dt>
                <dd class="col-md-6">
                    @Model.RaceWins
                    @if (Model.RaceEntries > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@((Model.RaceWins / Model.RaceEntries * 100).ToString("F"))%)</span>
                    }
                </dd>
                <dt class="col-md-6">
                    Podiums:
                </dt>
                <dd class="col-md-6">
                    @(Model.RaceWins + Model.SecondFinishes + Model.ThirdFinishes)
                    @if (Model.RaceEntries > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@(((Model.RaceWins + Model.SecondFinishes + Model.ThirdFinishes) / Model.TotalCarEntries * 100).ToString("F"))%)</span>
                    }
                </dd>
                <dt class="col-md-6">
                    Poles:
                </dt>
                <dd class="col-md-6">
                    @Model.Poles
                    @if (Model.RaceEntries > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@((Model.Poles / Model.RaceEntries * 100).ToString("F"))%)</span>
                    }
                </dd>
                <dt class="col-md-6">
                    DNF/DSQ:
                </dt>
                <dd class="col-md-6">
                    @Model.DidNotFinish
                    @if (Model.RaceEntries > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@((Model.DidNotFinish / Model.TotalCarEntries * 100).ToString("F"))%)</span>
                    }
                </dd>
                <dt class="col-md-6">
                    Average position:
                </dt>
                <dd class="col-md-6">
                    @Model.AveragePos
                </dd>
            </dl>

            <div class="w-50" style="max-width: 500px;">
                <p id="biography" contenteditable="true">
                    @if (Model.TeamBio == null)
                    {
                        <i>This team has no bio yet!</i>
                    }
                    else
                    {
                        @Model.TeamBio
                    }
                </p>
                <button id="savebio" class="btn float-right"><i class="far fa-save"></i></button>
            </div>
        </div>

        <div style="margin-left:auto;margin-right:auto;width:600px;">
            <canvas id="PosBarChart"></canvas>
        </div>
    </div>

    <div class="flex-row justify-content-between">
        <a asp-action="Index">
            <i class="fas fa-arrow-alt-circle-left fa-2x"></i>
        </a>
        <button class="btn" onclick="takeScreenshot('#graphic', '#screenshot')"><i class="fas fa-image fa-2x"></i></button>
    </div>

    <div id="screenshot"></div>
</div>

<script>
    $('#savebio').click(function () {
        $.ajax({
            type: "POST",
            url: "/Teams/SaveBiography",
            data: { id: @Model.TeamId, biography: $("#biography").text() },
            dataType: "html",
            success: function () { alert("Biography saved."); },
            error: function () { alert("Saving biography failed."); }
        });
    });

    $(function () {
        // Barchart for the kind of positions a driver has finished
        var ctxPosBar = document.getElementById('PosBarChart').getContext('2d');
        var posBarLabels = @Html.Raw(Json.Serialize(Model.PositionList));
        var posBarValues = @Html.Raw(Json.Serialize(Model.ResultList));
        var posBarColours = ['gold', 'silver', '#cd7f32'];
        while (posBarColours.length != 10) {
            posBarColours.push('green');
        }
        while (posBarColours.length != posBarLabels.length) {
            posBarColours.push('blue');
        }

        var posBarChart = new Chart(ctxPosBar, {
            type: 'bar',
            data: {
                labels: posBarLabels,
                datasets: [{
                    data: posBarValues,
                    backgroundColor: posBarColours,
                }],
            },
            options: {
                scales: {
                    xAxes: [{
                        categoryPercentage: 1.0,
                        barPercentage: 1.0
                    }],
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                },
                legend: {
                    display: false,
                }
            }
        });
    });
</script>