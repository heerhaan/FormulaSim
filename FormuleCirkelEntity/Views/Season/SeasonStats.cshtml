@model IEnumerable<FormuleCirkelEntity.Models.SeasonDriver>

@{
    ViewData["Title"] = "Season details";
}

<div class="d-inline-block">
    <h1>Details for season: @ViewBag.number</h1>

    <div class="flex-row justify-content-between">
        <h3>Power rankings</h3>
        <div>
            <a asp-controller="Home" asp-action="PastDriverStandings" asp-route-seasonId="@ViewBag.seasonId">
                <span class="custom-badge badge-light">WDC</span>
            </a>
            <a asp-controller="Home" asp-action="PastTeamStandings" asp-route-seasonId="@ViewBag.seasonId">
                <span class="custom-badge badge-light">WCC</span>
            </a>
        </div>
    </div>
    
    <table id="graphic" class="ctable fullborder fullwidth">
        <thead class="fullborder">
            <tr>
                <th>#</th>
                <th>Driver</th>
                <th>Skill</th>
                <th>Rel.</th>
                <th>Team</th>
                <th class="tcc-crew"><span>Chassis</span></th>
                <th class="tcc-chassis"><span>Engine</span></th>
                <th>Power</th>
                <th>Total</th>
                <th>TOP-ACC-HDL</th>
                <th>Rel.</th>
            </tr>
        </thead>
        <tbody class="table-counter">
            @foreach (var driver in Model)
            {
                <tr>
                    <td><b class="table-count"></b></td>
                    <td class="text-left">
                        <span class="ml-cel">
                            @if (driver.DriverStatus == DriverStatus.First)
                            {<b>@driver.Driver.Name</b> }
                        else if (driver.DriverStatus == DriverStatus.Second)
                        { <i>@driver.Driver.Name</i> }
                    else
                    { @driver.Driver.Name}
                        </span>
                    </td>
                    <td class="onclick-hide">@driver.Skill</td>
                    <td><span class="alt-color small">@driver.Reliability</span></td>
                    <td><span class="badge badge-team fullwidth" 
                              style="background-color:@(driver.SeasonTeam.Colour);color:@(driver.SeasonTeam.Accent);border-color:@(driver.SeasonTeam.Accent);font-size:1rem;">
                        @driver.SeasonTeam.Name</span></td>
                    <td class="onclick-hide">@(driver.SeasonTeam.Chassis + (((int)driver.DriverStatus) * -2) + 2)</td>
                    <td>@driver.SeasonTeam.Engine.Name</td>
                    <td class="onclick-hide">@driver.SeasonTeam.Engine.Power</td>
                    <td class="onclick-hide">@(driver.Skill + driver.SeasonTeam.Chassis + driver.SeasonTeam.Engine.Power + ((((int)driver.DriverStatus) * -2) + 2))</td>
                    <td>
                        <span class="badge badge-dark spec-val" style="width:30%;color:black;">@driver.SeasonTeam.Topspeed</span>
                        <span class="badge badge-dark spec-val" style="width:30%;color:black;">@driver.SeasonTeam.Acceleration</span>
                        <span class="badge badge-dark spec-val" style="width:30%;color:black;">@driver.SeasonTeam.Handling</span>
                    </td>
                    <td><span class="alt-color small">@(driver.SeasonTeam.Reliability)</span></td>
                </tr>
            }
        </tbody>
    </table>

    <div class="flex-row justify-content-between mb-1">
        <a class="btn" asp-action="Index">
            <i class="fas fa-arrow-alt-circle-left"></i> Back
        </a>
        <button class="btn" onclick="takeScreenshot('#graphic', '#screenshot')" data-toggle="tooltip" data-placement="right" title="@Constants.ToolTipImageBtn">
            <i class="fas fa-image fa-2x"></i>
        </button>
    </div>

    <div id="screenshot"></div>
</div>

<script>
    $(function () {
        var specValues = document.getElementsByClassName("spec-val");
        // First we try to find the max value in the used specification values
        var max = getMaxValueFromCollection(specValues);
        // In the next iteration we can apply the hue to the badge
        for (var i = 0; i < specValues.length; i++) {
            var iterVal = parseInt(specValues[i].innerText);
            var hueVal = iterVal / max;
            specValues[i].style.color = getColourGradient(hueVal);
        }
    });
</script>