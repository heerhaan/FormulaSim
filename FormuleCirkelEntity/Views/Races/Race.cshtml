@model FormuleCirkelEntity.ViewModels.RacesRaceModel
@{
    ViewData["Title"] = "Race";
}

<div class="d-inline-block">
    <div class="flex-row justify-content-between">
        @if (Model.ShowRaceButtons && Model.IsAdmin)
        {
            <a class="btn fullborder w-25" onclick="advanceStint()">Next stint</a>

            <form asp-action="FinishRace" asp-route-seasonId="@(Model.SeasonId)" asp-route-raceId="@(Model.RaceId)" id="finish" class="w-25">
                <input type="submit" value="Finish" class="btn fullborder fullwidth" />
            </form>
        }
    </div>
    <div id="graphic">
        <div class="flex-row justify-content-center mb-1 mt-2">
            <img src="~/images/formuladreamlogothicc.png" title="Logo" alt="Formula Logo" width="146" height="48" class="mr-auto"/>
            <h2 class="alt-header">
                <span class="flag flag-@(Model.RaceFlag) ff-lg flag-margin"></span>
                @Html.DisplayFor(model => model.FullRaceTitle)
            </h2>
            <i id="weather" class="ml-auto mt-auto mb-auto fas"></i>
        </div>
        <table id="results" class="ctable fullborder">
            <thead>
                <tr>
                    <th class="th-sm" data-field="position">POS</th>
                    <th class="th-sm">GRID</th>
                    <th class="th-sm">NO</th>
                    <th>NAME</th>
                    <th>TEAM</th>
                    <th class="th-sm">PWR</th>
                    <th class="th-sm">TYRE</th>
                    @foreach (var stint in Model.RaceStints.OrderBy(res => res.Number))
                    {
                        <th class="th-sm" data-field="stintResultHeader-@stint.Number">
                            @stint.Number
                        </th>
                    }
                    <th class="th-sm" data-field="pointsTotal">TOT</th>
                    <th class="th-md">GAP</th>
                    <th class="th-sm">PTS</th>
                    <th style="display:none;"></th>
                    <th style="display:none;"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var driverResult in Model.DriverResults)
                {
                    int gridChange = (driverResult.Grid - driverResult.Position);
                    <tr data-obj-id="@driverResult.SeasonDriverId">
                        <td data-field="position" class="primary-force"><b class="alt-font">@driverResult.Position</b></td>
                        <td data-field="startGrid" class="primary-force">
                            @if (gridChange > 0)
                            {
                                <i class='fas fa-caret-up' style='color:green;'></i><span class='alt-font ml-1'>@gridChange</span>
                            }
                            else if (gridChange < 0)
                            {
                                <i class='fas fa-caret-down' style='color:red;'></i><span class='alt-font ml-1'>@(gridChange * -1)</span>
                            }
                            else
                            {
                                <i class='fas fa-minus' style='color:yellow;font-size:0.7rem;'></i><span class='alt-font ml-1'>@gridChange</span>
                            }
                        </td>
                        <td data-field="driverNumber"><span class="custom-badge badge-team fullwidth" 
                                                            style="background-color:@(driverResult.SeasonDriver.SeasonTeam.Colour);color:@(driverResult.SeasonDriver.SeasonTeam.Accent);border-color:@(driverResult.SeasonDriver.SeasonTeam.Accent);">
                            @driverResult.SeasonDriver.Driver.DriverNumber</span></td>
                        <td data-field="driverName" class="text-left primary-force"><span class="ml-cel result-click" style="cursor:pointer;"><span data-field="driverFlag" class="flag flag-@(driverResult.SeasonDriver.Driver.Country) ff-sm flag-margin"></span>
                            @driverResult.SeasonDriver.Driver.Name
                              </span></td>
                        <td data-field="teamName"><span class="custom-badge badge-team fullwidth" 
                                                        style="background-color:@(driverResult.SeasonDriver.SeasonTeam.Colour);color:@(driverResult.SeasonDriver.SeasonTeam.Accent);border-color:@(driverResult.SeasonDriver.SeasonTeam.Accent);">
                            @driverResult.SeasonDriver.SeasonTeam.Name</span></td>
                        <td data-field="pwr" class="secondary-force"><b class="alt-font">@(Model.Power[driverResult.Position - 1])</b></td>
                        <td data-field="tyre">
                            <span class="custom-badge fullwidth" style="background-color:@driverResult.CurrTyre.TyreColour;">
                                [@driverResult.CurrTyre.TyreName.Substring(0, 1).ToUpper()] @driverResult.TyreLife
                            </span>
                        </td>
                        @foreach (var stint in Model.RaceStints.OrderBy(res => res.Number))
                        {
                            var stintResult = driverResult.StintResults.First(res => res.Number == stint.Number);
                            <td class="stint-@stintResult.Number" data-field="stintResult-@stintResult.Number">
                                <div condition-class-racemistake="@(stintResult.StintStatus == StintStatus.Mistake)">
                                    @if (stintResult.StintStatus == StintStatus.Running || stintResult.StintStatus == StintStatus.Mistake || stintResult.StintStatus == StintStatus.Pitstop)
                                    {
                                        <span>@stintResult.Result</span>
                                        @if (stintResult.StintStatus == StintStatus.Pitstop || stintResult.Pitstop)
                                        {
                                            <b class="pole">PIT</b>
                                        }
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </div>
                            </td>
                        }
                        @if (driverResult.Status == Status.DNF)
                        {
                            <td data-field="pointsTotal"><span class="custom-badge result-dnf nofullwidth">DNF</span></td>
                            <td data-field="dnfCause"><b>@driverResult.DNFCause</b></td>

                        }
                        else if (driverResult.Status == Status.DSQ)
                        {
                            <td data-field="pointsTotal"><span class="custom-badge badge-dsq nofullwidth">DSQ</span></td>
                            <td data-field="dnfCause"><b>@driverResult.DSQCause</b></td>
                        }
                        else
                        {
                            <td data-field="pointsTotal">@driverResult.Points</td>
                            <td data-field="dnfCause">-</td>
                        }

                        @if (driverResult.Position > Model.MaxPos)
                        {
                            <td data-field="points" class="primary-force"></td>
                        }
                        else
                        {
                            <td data-field="points" class="secondary-force"><b class='alt-font'>@Model.PointsPerPosition[driverResult.Position]</b></td>
                        }
                        <td data-field="abbreviation" style="display:none;"><span>@driverResult.SeasonDriver.Driver.Abbreviation</span></td>
                        <td data-field="fullTeamName" style="display:none;"><span>@driverResult.SeasonDriver.SeasonTeam.Name</span></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="flex-row justify-content-between">
        <button class="btn" onclick="takeScreenshot('#graphic', '.screenshot')" data-toggle="tooltip" data-placement="right" title="@Constants.ToolTipImageBtn">
            <i class="fas fa-image fa-2x"></i>
        </button>
        <button class="btn" onclick="redrawChart()"><i class="fas fa-chart-bar fa-2x mt-auto"></i></button>
    </div>
    <div class="screenshot"></div>
    <div id="resultScreenshot"></div>
    <div style="overflow: hidden; height: 0;">
        <div id="formulaGraphic">
            <div id="position">0</div>
            <div id="divider"></div>
            <div id="details">
                <div class="flex-row">
                    <div id="name">Firstname Lastname</div>
                    <div id="flag" class="ff-xl flag flag-JR"></div>
                </div>
                <div id="team">Racing Team</div>
            </div>
            <div id="extra">
                <div id="number">0</div>
                <div id="tla">LAS</div>
            </div>
        </div>
    </div>
    <div id="raceChartWrap">
        <canvas id="raceChart"></canvas>
    </div>
</div>

<script>
    const raceLen = @(Model.RaceStints.Count);
    const pointsPosition = @(Json.Serialize(Model.PointsPerPosition));

    const table = document.querySelector('#results');
    const tableBody = table.querySelector("tbody");
    const bodyelem = document.querySelector('body');
    const bodystyle = getComputedStyle(bodyelem);

    $(function () {
        // Appends the correct icon for the corresponding weather for the race
        var weatherclass = "";
        switch ("@Model.Weather") {
            case "Sunny":
                weatherclass = "fa-sun fa-2x";
                break;
            case "Overcast":
                weatherclass = "fa-cloud fa-2x";
                break;
            case "Rain":
                weatherclass = "fa-cloud-rain fa-2x";
                break;
            case "Storm":
                weatherclass = "fa-cloud-moon-rain fa-2x";
                break;
        }
        $("#weather").addClass(weatherclass);

        // Also starts the function to calculate the gap between drivers.
        calculateGap();
        // Calculates the gradients for each points row
        calculateStintGradients();
    });

    function resultOrMissing(result) {
        return (result == null ? "-" : result);
    }

    var DNFCauses = [
        "None",
        "Damage",
        "Collision",
        "Accident",
        "Puncture",
        "Engine",
        "Electrics",
        "Exhaust",
        "Clutch",
        "Hydraulics",
        "Wheel",
        "Brakes"
    ];

    var DSQCauses = [
        "None",
        "Illegal",
        "Fuel",
        "Dangerous",
    ];

    function processStintResponse(res) {
        res.forEach((driverResult, idx) => {
            let row = tableBody.querySelector("tr[data-obj-id='" + driverResult.SeasonDriverId + "']");

            if (driverResult.Status == 1) {
                row.querySelector("td[data-field='pointsTotal']").innerHTML = "<span class='custom-badge result-dnf nofullwidth'>DNF</span>";
                row.querySelector("td[data-field='dnfCause']").innerHTML = "<i>" + DNFCauses[driverResult.DNFCause] + "</i>";
            }
            else if (driverResult.Status == 2) {
                row.querySelector("td[data-field='pointsTotal']").innerHTML = "<span class='custom-badge badge-dsq nofullwidth'>DSQ</span>";
                row.querySelector("td[data-field='dnfCause']").innerHTML = "<b>" + DSQCauses[driverResult.DSQCause] + "</b>";
            }
            else {
                row.querySelector("td[data-field='pointsTotal']").innerText = driverResult.Points;
                row.querySelector("td[data-field='dnfCause']").innerText = "-";
            }
            row.querySelector("td[data-field='tyre']").innerHTML = "<span class='custom-badge badge-tyre' style='background-color:" + driverResult.CurrTyre.TyreColour + ";'>[" + driverResult.CurrTyre.TyreName.substring(0, 1) + "] " + driverResult.TyreLife + "</span>";
            row.querySelector("td[data-field='position']").innerText = driverResult.Position;

            let gridChange = (driverResult.Grid - driverResult.Position);
            if (gridChange > 0) {
                row.querySelector("td[data-field='startGrid']").innerHTML = "<i class='fas fa-caret-up' style='color:green;'></i><span class='alt-font ml-1'> " + gridChange + " </span>";
            }
            else if (gridChange < 0) {
                row.querySelector("td[data-field='startGrid']").innerHTML = "<i class='fas fa-caret-down' style='color:red;'></i><span class='alt-font ml-1'> " + (gridChange * -1) + " </span>";
            }
            else {
                row.querySelector("td[data-field='startGrid']").innerHTML = "<i class='fas fa-minus' style='color:yellow;font-size:0.7rem;'></i><span class='alt-font ml-1'> " + gridChange + " </span>";
            }
            driverResult.StintResults.forEach((stintResult, idx) => {
                // Check for what happened in this stint: 1=running, 20=mistake, 4=pitstop (deprecated)
                if (stintResult.StintStatus == 1 || stintResult.StintStatus == 20 || stintResult.StintStatus == 4) {
                    var resultHtml = "<div";
                    if (stintResult.StintStatus == 20) {
                        resultHtml += " class='racemistake'";
                    }
                    resultHtml += ("><span>" + stintResult.Result + "</span>");
                    // If a pitstop happened, then info is added to the cell
                    if (stintResult.StintStatus == 4 || stintResult.Pitstop) {
                        resultHtml += "<b class='pole'>PIT</b>";
                    }
                    resultHtml += "</div>"
                    row.querySelector("td[data-field='stintResult-" + stintResult.Number + "']").innerHTML = resultHtml;
                }
                else {
                    row.querySelector("td[data-field='stintResult-" + stintResult.Number + "']").innerText = "-";
                }
            });
            if (driverResult.Position > @Model.MaxPos) {
                row.querySelector("td[data-field='points']").outerHTML = "<td data-field='points' class='primary-force'></td>";
            }
            else {
                row.querySelector("td[data-field='points']").outerHTML = "<td data-field='points' class='secondary-force'><b class='alt-font'>" + pointsPosition[driverResult.Position] + "</b></td>";
            }
        });

        let th = table.querySelector("th[data-field='position']")
        let tableRows = tableBody.querySelectorAll("tr:nth-child(n+1)")
        Array.from(tableRows)
            .sort(tableComparer(Array.from(th.parentNode.children).indexOf(th), true))
            .forEach(tr => table.querySelector("tbody").appendChild(tr));

        calculateGap();
        calculateStintGradients();
    }

    function advanceStint() {
        fetch("/Season/@Model.SeasonId/Races/@Model.RaceId/Advance", { method: "POST" })
            .then(response => response.json())
            .then(result => processStintResponse(result));
    }

    function comparer(index, isAscending) {
        let getCellValue = (row, idx) => row.children[idx].innerText || row.children[idx].textContent;
        let isNumber = (val) => val !== '' && !isNaN(val);
        return function (a, b) {
            let valA = getCellValue(isAscending ? a : b, index), valB = getCellValue(isAscending ? b : a, index);
            return isNumber(valA) && isNumber(valB) ? valA - valB : valA.toString().localeCompare(valB)
        }
    }

    function calculateGap() {
        let leaderscore = tableBody.querySelector("td[data-field='pointsTotal']").innerText;
        let leaderapplied = false;
        $("#results tbody tr").each(function (index, row) {
            let score = row.querySelector("td[data-field='pointsTotal']").innerText;
            if (score != "DNF" && score != "DSQ") {
                let gap = "+" + ((leaderscore - score) * 0.37).toFixed(2);
                if (gap == "+0.00" && leaderapplied == false) {
                    gap = "Leader";
                    leaderapplied = true;
                }
                gap = "<i>" + gap + "</i>"
                row.querySelector("td[data-field='dnfCause']").innerHTML = gap;
            }
        });
    }

    function calculateStintGradients() {
        for (var i = 1; i <= raceLen; i++) {
            var stintValues = document.getElementsByClassName("stint-" + i);
            var min = getMinValueFromCollection(stintValues);
            var max = getMaxValueFromCollection(stintValues);
            for (var j = 0; j < stintValues.length; j++) {
                var iterVal = parseInt(stintValues[j].innerText);
                var hueVal = (iterVal - min) / (max - min);
                stintValues[j].style.color = getColourGradient(hueVal);
            }
        }
    }

    $(".result-click").click(function () {
        var row = $(this).closest("tr");
        var position = row.find("td[data-field='position']").text();
        var name = row.find("td[data-field='driverName']").text();
        var flag = row.find("span[data-field='driverFlag']").attr('class').split(' ')[1];
        var number = row.find("td[data-field='driverNumber']").text();
        var team = row.find("td[data-field='fullTeamName']").text();
        var tla = row.find("td[data-field='abbreviation']").text();
        var colour = row.find("td[data-field='teamName']").find("span").css("background-color");
        var dnf = row.find("td[data-field='pointsTotal']").find("span").text();

        if (name == $('#name').text()) {
            colour = row.find("td[data-field='teamName']").find("span").css("color");
        }
        var flagToRemove = $('#flag').attr('class').split(' ')[2];
        $('#position').text(position);
        $('#name').text(name);
        $('#flag').removeClass(flagToRemove);
        $('#flag').addClass(flag);
        $('#tla').text(tla);
        $('#team').text(team);
        $('#number').text(number);
        $('#divider').css('background-color', colour);
        $('#extra').css('color', colour);

        if (dnf == "DNF" || dnf == "DSQ") {
            $('#position').addClass('eliminated');
        }
        else {
            $('#position').removeClass('eliminated');
        }
        takeScreenshot("#formulaGraphic", "#resultScreenshot");
    });

    function drawRaceChart(res) {
        var ctx = document.getElementById('raceChart');
        ctx.height = 250;
        ctx.getContext('2d');
        var driversets = [];

        $(res).each(function (driverKey, driverValue) {
            var stintresults = [];
            // First enters the grid position of the driver as their starting point
            stintresults.push(driverValue.Grid);
            // Gets the stintresults and first orders them by their stint number
            var stintsToLoop = driverValue.StintResults.sort((a, b) => (a.Number > b.Number) ? 1 : ((b.Number > a.Number) ? -1 : 0));
            // Loop through the sorted stints and add the position they had during that respective stint to the stintresults
            for (index = 0; index < stintsToLoop.length; ++index) {
                stintresults.push(stintsToLoop[index].Position);
            }
            // Dataset object of one driver which is used for the graph
            var driverDataset = {
                label: driverValue.SeasonDriver.Driver.Name,
                backgroundColor: driverValue.SeasonDriver.SeasonTeam.Accent,
                borderColor: driverValue.SeasonDriver.SeasonTeam.Colour,
                data: stintresults,
                fill: false,
                teamName: driverValue.SeasonDriver.SeasonTeam.Team.Name
            };
            if (driversets.some(d => d.backgroundColor === driverValue.SeasonDriver.SeasonTeam.Accent && d.borderColor === driverValue.SeasonDriver.SeasonTeam.Colour)) {
                driverDataset.borderDash = [5, 5];
            }
            driversets.push(driverDataset);
        });
        driversets.sort((a, b) => (a.teamName > b.teamName) ? 1 : -1);

        var stintlabels = [];
        for (i = 0; i <= raceLen; i++) {
            var stringstint = i;
            stintlabels.push(stringstint);
        }

        Chart.pluginService.register({
            beforeDraw: function (chart, easing) {
            if (chart.config.options.chartCanvas && chart.config.options.chartCanvas.backgroundColor) {
                    var ctx = chart.chart.ctx;
                    ctx.save();
                    ctx.fillStyle = chart.config.options.chartCanvas.backgroundColor;
                    ctx.fillRect(0, 0, chart.chart.width, chart.chart.height);
                    ctx.restore();
                }
            }
        });

        let chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: stintlabels,
                datasets: driversets
            },
            options: {
                title: {
                    display: true,
                    text: '@Model.FullRaceTitle',
                    fontColor: '#e6e6e6'
                },
                tooltips: {
                    //enabled: false
                },
                hover: {
                    //mode: null
                },
                scales: {
                    xAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Stints',
                            fontColor: '#e6e6e6'
                        },
                        ticks: {
                            fontColor: '#e6e6e6'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Position',
                            fontColor: '#e6e6e6'
                        },
                        ticks: {
                            reverse: true,
                            min: 1,
                            max: @Model.CountDrivers,
                            fontColor: '#e6e6e6'
                        },
                        position: 'left'
                    }, {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Position',
                            fontColor: '#e6e6e6'
                        },
                        ticks: {
                            reverse: true,
                            min: 1,
                            max: @Model.CountDrivers,
                            fontColor: '#e6e6e6'
                        },
                        position: 'right'
                        }]
                },
                elements: {
                    line: {
                        tension: 0
                    }
                },
                legend: {
                    labels: {
                        boxWidth: 28,
                        fontSize: 13,
                        fontColor: '#e6e6e6'
                    }
                },
                chartCanvas: {
                    backgroundColor: bodystyle.backgroundColor
                }
            }
        });

        let legends = chart.legend.legendItems;
        legends.forEach(function (e) {
            [e.fillStyle, e.strokeStyle] = [e.strokeStyle, e.fillStyle];
        });
    }

    function getCurrentResults() {
        fetch("/Season/@Model.SeasonId/Races/@Model.RaceId/getResults", { method: "POST" })
            .then(response => response.json())
            .then(result => drawRaceChart(result));
    }

    function redrawChart() {
        $("canvas#raceChart").remove();
        $("#raceChartWrap").append("<canvas id='raceChart'></canvas>");
        getCurrentResults();
    }
</script>

<style>
    #weather {
        margin-right: 27px;
        margin-top: 15px;
    }

    #formulaGraphic {
        margin-top: 50px;
        background-color: black;
        color: white;
        display: flex;
        flex-direction: row;
        border-bottom-right-radius: 15px;
        width: 890px;
        height: 105px;
        font-family: "Formula1 Display";
        text-align: left;
        line-height: 1.5;
    }

        #formulaGraphic #position {
            background-color: white;
            color: black;
            width: 91px;
            height: 91px;
            margin: 7px;
            margin-right: 0;
            line-height: 91px;
            vertical-align: middle;
            text-align: center;
            font-size: 48px;
            border-bottom-right-radius: 15px;
        }

        #formulaGraphic #divider {
            background-color: #28E8EE;
            width: 9px;
            margin: 17px 12px;
        }

        #formulaGraphic #details {
            margin-top: 17px;
            margin-bottom: 17px;
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

            #formulaGraphic #details #name {
                font-size: 2.5em;
                margin-top: -18px;
                font-family: "Formula1 Display";
            }

            #formulaGraphic #details #flag {
                margin-top: -2px;
                margin-left: 5px;
            }

            #formulaGraphic #details #team {
                margin-top: auto;
                margin-bottom: -5px;
                font-size: 28px;
            }

        #formulaGraphic #extra {
            margin-top: 5px;
            margin-bottom: 10px;
            color: #28E8EE;
            text-align: center;
            margin-right: 30px;
        }

            #formulaGraphic #extra #number {
                font-size: 3em;
                margin-top: -10px;
            }

            #formulaGraphic #extra #tla {
                font-size: 1.5em;
            }

    #resultScreenshot {
        margin-top: 20px;
    }

        #resultScreenshot canvas:hover {
            cursor: pointer;
        }

    .eliminated {
        background-color: #870019 !important;
        color: white !important;
    }
</style>