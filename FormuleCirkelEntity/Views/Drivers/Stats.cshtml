@model FormuleCirkelEntity.ViewModels.DriverStatsModel

    @{
        ViewData["Title"] = "Driver bio";
    }

<div class="d-inline-block">
    <div id="graphic">
        <h1>Biography</h1>
        <h4>#@Model.DriverNumber - <span class="flag flag-BQ ff-xl flag-margin"></span>@Model.DriverName</h4>

        <div class="col mb-1 ml-auto mr-auto" style="max-width: 800px;">
            <h5 class="mb-1"><b>Teams: </b></h5>
            <div>
                @foreach (var team in Model.Teams)
                {
                    <span class="badge" style="background-color: white;color: black;font-size:0.9rem;">@team.Abbreviation</span>
                }
            </div>
        </div>

        <div class="flex-row">
            <dl class="flex-row text-left w-50">
                <dt class="col-md-6">
                    Starts:
                </dt>
                <dd class="col-md-6">
                    @Model.StartCount
                </dd>
                <dt class="col-md-6">
                    Championships:
                </dt>
                <dd class="col-md-6">
                    @Model.WDCCount
                </dd>
                <dt class="col-md-6">
                    Wins:
                </dt>
                <dd class="col-md-6">
                    @Model.WinCount
                    @if (Model.StartCount > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@((Model.WinCount / Model.StartCount * 100).ToString("F"))%)</span>
                    }
                </dd>
                <dt class="col-md-6">
                    Podiums:
                </dt>
                <dd class="col-md-6">
                    @(Model.WinCount + Model.SecondCount + Model.ThirdCount)
                    @if (Model.StartCount > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@(((Model.WinCount + Model.SecondCount + Model.ThirdCount) / Model.StartCount * 100).ToString("F"))%)</span>
                    }
                </dd>
                <dt class="col-md-6">
                    Poles:
                </dt>
                <dd class="col-md-6">
                    @Model.PoleCount
                    @if (Model.StartCount > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@((Model.PoleCount / Model.StartCount * 100).ToString("F"))%)</span>
                    }
                </dd>
                <dt class="col-md-6">
                    DNF/DSQ:
                </dt>
                <dd class="col-md-6">
                    @Model.DNFCount
                    @if (Model.StartCount > 0)
                    {
                        <span class="text-muted" style="font-size:0.8rem;">  (@((Model.DNFCount / Model.StartCount * 100).ToString("F"))%)</span>
                    }
                </dd>
            </dl>
            <div class="w-50" style="max-width: 500px;">
                <p id="biography" contenteditable="true">
                    @if (Model.DriverBio == null)
                    {
                        <i>This driver has no bio yet!</i>
                    }
                    else
                    {
                        @Model.DriverBio
                    }
                </p>
                <button id="savebio" class="btn float-right"><i class="far fa-save"></i></button>
            </div>
        </div>

        <div class="flex-row justify-content-between">
            <div>
                <canvas id="PosBarChart" width="500" height="300"></canvas>
            </div>
            <div>
                <canvas id="NonFinishCauses" width="250" height="300"></canvas>
            </div>
        </div>
    </div>

    <div class="row justify-content-between">
        <a class="btn" asp-action="Index">
            <i class="fas fa-arrow-alt-circle-left"></i> Back
        </a>
        <button class="btn" onclick="takeScreenshot('#graphic', '#screenshot')"><i class="fas fa-image fa-2x"></i></button>
    </div>

    <div id="screenshot"></div>
</div>

<script>
    $('#savebio').click(function () {
        $.ajax({
            type: "POST",
            url: "/Drivers/SaveBiography",
            data: { id: @Model.DriverId, biography: $("#biography").text() },
            dataType: "html",
            success: function () { alert("Biography saved!"); },
            error: function () { alert("Saving failed."); }
        });
    });

    $(function () {
        // Barchart for the kind of positions a driver has finished
        var ctxPosBar = document.getElementById('PosBarChart').getContext('2d');
        var posBarLabels = ['P1', 'P2', 'P3', 'Points', 'Outside', 'DNF' ];
        var posBarValues = [@Model.WinCount, @Model.SecondCount, @Model.ThirdCount, @Model.PointFinishCount, @Model.OutsideCount, @(Model.DNFCount + Model.DSQCount)];
        var posBarColours = ['gold', 'silver', '#cd7f32', 'green', 'blue', 'red'];

        var posBarChart = new Chart(ctxPosBar, {
            type: 'bar',
            data: {
                labels: posBarLabels,
                datasets: [{
                    data: posBarValues,
                    backgroundColor: posBarColours,
                }],
            },
            options: {
                scales: {
                    xAxes: [{
                        categoryPercentage: 1.0,
                        barPercentage: 1.0
                    }],
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                },
                legend: {
                    display: false,
                }
            }
        });

        // Piechart to look into the sorts of DNFs / DSQs a driver has
        var ctxDnfPie = document.getElementById('NonFinishCauses').getContext('2d');
        var dnfPieLabels = ['Accident', 'Contact', 'Engine', 'Mechanical', 'DSQ'];
        var dnfPieValues = [@Model.AccidentCount, @Model.ContactCount, @Model.EngineCount, @Model.MechanicalCount, @Model.DSQCount];
        var dnfPieColours = ['purple', 'red', 'darkblue', 'grey', 'black'];

        var dnfPieChart = new Chart(ctxDnfPie, {
            type: 'pie',
            data: {
                labels: dnfPieLabels,
                datasets: [{
                    data: dnfPieValues,
                    backgroundColor: dnfPieColours,
                }],
            },
            options: {
                responsive: false
            }
        });

    });
</script>